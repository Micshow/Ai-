def dfs(graph, start, goal):
  """
  Performs a Depth First Search on a graph to find the path from a start node to a goal node.

  Args:
    graph: A dictionary representing the graph, where keys are nodes and values are lists of adjacent nodes.
    start: The starting node for the search.
    goal: The goal node to find.

  Returns:
    A list of nodes representing the path from the start node to the goal node, or None if no path is found.
  """
  visited = set()  # Keep track of visited nodes.
  stack = [start]  # Stack to keep track of nodes to explore.

  while stack:
    current_node = stack.pop()
    visited.add(current_node)

    if current_node == goal:
      # Found the goal node! Return the path.
      return [node for node in reversed(visited)]

    for neighbor in graph[current_node]:
      if neighbor not in visited:
        stack.append(neighbor)

  # No path found.
  return None

# Define the graph as a dictionary based on the image.
graph = {
  2: [0, 3, 6],
  0: [1, 2, 5],
  1: [0, 4],
  5: [0, 8],
  8: [5],
  3: [2, 7],
  7: [3],
  6: [2],
  4: [1],
}

# Find the path from node 2 to node 7.
path = dfs(graph, 2, 7)

# Print the path, if found.
if path:
  print("Path from node 2 to node 7:", " -> ".join(str(node) for node in path))
else:
  print("No path found from node 2 to node 7.")
